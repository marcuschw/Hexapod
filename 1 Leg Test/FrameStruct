#include <math.h>
#include <Servo.h>

//####################
// This class stores the varaiables of each object for example its position and denevit-hartenburg parameters
// Here an object is something that has its own denevit-harenburg parameters. This includes all the joints and the end effector

// The functions this class includes are:
//   //pos(): returns the positon of the object like this, "posx posy posz"
//   update_t(): generates the denevit-hartenburg matrix of the objects using the 4 parameters:
//      t(t for theta),
//      a(a for alpha, not to be confused with an allies of 'r' which is also a),
//      r(can also be refered to as 'a'(not to be confused with alpha)),
//      d
//####################

struct Frame {
  
  Servo srvo;

  float theta;  // this will always be read only
  
  float posx, posy, posz;
  float a, r, d;
  float cosa, sina;
  float dvm[4][4];  // the denevit-hartenburg matrix
  float offset;

  //denevit-hartenburg params, angles given in radians
  Frame(float a, float r, float d, Servo srvo, float offset):  // srvo is the joint for the angle theta of frame before this one
    a(a), r(r), d(d),
    cosa(cos(a)), sina(sin(a)),
    srvo(srvo), offset(offset)
  {}

  void update_t(float t) {  // updates the denevit-hartenburg params to the new value of t
    float cost = cos(t);
    float sint = sin(t);

    float _dvm[4][4] = {
      {cost, -sint * cosa, sint * sina, r * cost},
      {sint, cost * cosa, -cost * sina, r * sint},
      {0, sina, cosa, d},
      {0, 0, 0, 1}
    };
    for (int i = 0; i < 4; i++) {
      for (int j = 0; j < 4; j++) {
        dvm[i][j] = _dvm[i][j];
      }
    }
    float _angle = -1 * t * 57.2958 + offset;  // converts t into deg which srvo.write can understand. Also constrains the value so the servo doesnt go off limits which could risk damaging it
    float angle = constrain(_angle, -85, 85);
    theta = t*57.296;
    srvo.write(90 + angle);
    delay(3);
  }

  void mat2pos(float mat[4][4]) {  // extracts the x, y, z positions stored in a homogeneous matrix and writes it onto posx, posy, and posz
    posx = mat[0][3];
    posy = mat[1][3];
    posz = mat[2][3];
  }
};
