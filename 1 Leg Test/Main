#include "Frame.h"
#include "Target.h"
#include <Servo.h>
#include <math.h>

extern float MATa[4][4];
extern float MATb[4][4];

Servo frame1srvo;
Servo frame2srvo;
Servo frame3srvo; // end effector

float inputPos = 0;

//            alpha, a ,  d, servo, theta, offset (deg)
Frame frame1(PI/2, 50, 0, frame1srvo, 0);
Frame frame2(0, 100.3, 0, frame2srvo, 0);
Frame frame3(PI, 110, 0, frame3srvo, 30);

Target target(250, 0, 0);

void setup() {
  Serial.begin(9600);
  frame1.srvo.attach(11);
  frame2.srvo.attach(10);
  frame3.srvo.attach(9);

  frame3.srvo.write(0);
  frame2.update_t(0); // sets the angles(theta) of the frames to 0
  frame3.update_t(0);
}

void loop() {


  // input the x y z position for the target
  if (Serial.available()){
    target.x = Serial.parseFloat();
    
    while (true){
      if (Serial.available()){
        target.y = Serial.parseFloat();
        
      while (true){
        if (Serial.available()){
          target.z = Serial.parseFloat(); 
          return;
          }
        }
        return;
      }
    }
  }

  printPosInfo();

  CalcIK();
  

}


void CalcIK() {

  /*
   * This function computes Inverse Kinematics analyticly NOT numericaly
   */

   
  float frame2Transform[4][4];
  float frame3Transform[4][4];
  
  float r1 = frame1.r;
  float r2 = frame2.r;
  float r3 = frame3.r;

  float l1 = sqrt(pow(target.x , 2) + pow(target.y , 2)) - r1;
  float l2 = target.z;
  float l3 = sqrt(pow(l1 , 2) + pow(l2 , 2));

  float phi1 = acos((pow(r2 , 2) + pow(l3 , 2) - pow(r3 , 2)) / (2 * r2 * l3));
  float phi2 = atan2(l2, l1);
  float phi3 = acos((pow(r3 , 2) + pow(r2 , 2) - pow(l3 , 2)) / (2 * r3 * r2));

  float theta1 = atan2(target.y, target.x); // REVISE IK REVISE IK REVISE IK
  float theta2 = (phi1 + phi2);
  float theta3 = (PI - phi3);

  frame1.update_t(theta1);
  frame2.update_t(theta2);
  frame3.update_t(theta3);

  Serial.println(phi3);
  Serial.println(theta3);

 
  matmul(frame1.dvm, frame2.dvm, frame2Transform);
  frame1.mat2pos(frame1.dvm);
  frame2.mat2pos(frame2Transform);
  matmul(frame2Transform, frame3.dvm, frame3Transform);

  //printMat(frame3Transform);  use this for debugging
  
  frame3.mat2pos(frame3Transform);
}

void gait(const float pos1[3], const float pos2[3], float t) {

  target.x = (1 - t) * pos1[0] + t * pos2[0];
  target.y = (1 - t) * pos1[1] + t * pos2[1];
  target.z = (1 - t) * pos1[2] + t * pos2[2];
}

void matmul(float A[4][4], float B[4][4], float C[4][4]) { 
 /*  
 * This function will multiply two of the homogeneous matricies and the product write onto the variable: prod[4][4]
 *  It is hard coded as the matricies will be constant and it is more optimal than using loops
 * 
 *  --example--
 *  A = [[1,2],[3,4]]
 *  B = [[1,0],[0,1]]
 *  
 *  dotProduct = [[1,2][3,4]]
 *  
 *  --see also--
 *  https://www.mathsisfun.com/algebra/matrix-multiplying.html
 *  https://www.youtube.com/watch?v=dQw4w9WgXcQ  <-- This helped me the most out of everything
 */
 
  C[0][0] = A[0][0]*B[0][0] + A[0][1]*B[1][0] + A[0][2]*B[2][0] + A[0][3]*B[3][0];
  C[0][1] = A[0][0]*B[0][1] + A[0][1]*B[1][1] + A[0][2]*B[2][1] + A[0][3]*B[3][1];
  C[0][2] = A[0][0]*B[0][2] + A[0][1]*B[1][2] + A[0][2]*B[2][2] + A[0][3]*B[3][2];
  C[0][3] = A[0][0]*B[0][3] + A[0][1]*B[1][3] + A[0][2]*B[2][3] + A[0][3]*B[3][3];
  
  C[1][0] = A[1][0]*B[0][0] + A[1][1]*B[1][0] + A[1][2]*B[2][0] + A[1][3]*B[3][0];
  C[1][1] = A[1][0]*B[0][1] + A[1][1]*B[1][1] + A[1][2]*B[2][1] + A[1][3]*B[3][1];
  C[1][2] = A[1][0]*B[0][2] + A[1][1]*B[1][2] + A[1][2]*B[2][2] + A[1][3]*B[3][2];
  C[1][3] = A[1][0]*B[0][3] + A[1][1]*B[1][3] + A[1][2]*B[2][3] + A[1][3]*B[3][3];
  
  C[2][0] = A[2][0]*B[0][0] + A[2][1]*B[1][0] + A[2][2]*B[2][0] + A[2][3]*B[3][0];
  C[2][1] = A[2][0]*B[0][1] + A[2][1]*B[1][1] + A[2][2]*B[2][1] + A[2][3]*B[3][1];
  C[2][2] = A[2][0]*B[0][2] + A[2][1]*B[1][2] + A[2][2]*B[2][2] + A[2][3]*B[3][2];
  C[2][3] = A[2][0]*B[0][3] + A[2][1]*B[1][3] + A[2][2]*B[2][3] + A[2][3]*B[3][3];
  
  C[3][0] = A[3][0]*B[0][0] + A[3][1]*B[1][0] + A[3][2]*B[2][0] + A[3][3]*B[3][0];
  C[3][1] = A[3][0]*B[0][1] + A[3][1]*B[1][1] + A[3][2]*B[2][1] + A[3][3]*B[3][1];
  C[3][2] = A[3][0]*B[0][2] + A[3][1]*B[1][2] + A[3][2]*B[2][2] + A[3][3]*B[3][2];
  C[3][3] = A[3][0]*B[0][3] + A[3][1]*B[1][3] + A[3][2]*B[2][3] + A[3][3]*B[3][3];
}
